plugins {
    id "org.springframework.boot" version "2.7.18"
    id 'java'
    id 'signing'
    id 'maven-publish'
    id 'io.github.gradle-nexus.publish-plugin' version '1.3.0'
    id "io.spring.dependency-management" version "1.1.7"
    id "com.diffplug.spotless" version "5.17.1"
}

group = 'io.github.bestheroz'
version = '0.0.1-SNAPSHOT'
description = 'MyBatis Repository Interface'
java {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter:2.7.18'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.4'
    implementation 'jakarta.persistence:jakarta.persistence-api:3.0.0'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            pom {
                name = 'mybatis-repository'
                description = 'MyBatis Repository Interface'
                url = 'https://github.com/bestheroz/mybatis-repository'

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution = 'repo'
                    }
                }

                developers {
                    developer {
                        id = 'bestheroz'
                        name = 'Joony.Kim'
                        email = 'bestheroz@gmail.com'
                    }
                }

                scm {
                    url = 'https://github.com/bestheroz/mybatis-repository'
                    connection = 'scm:git:git://github.com/bestheroz/mybatis-repository.git'
                    developerConnection = 'scm:git:ssh://github.com:bestheroz/mybatis-repository.git'
                }
            }
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
            username = findProperty('ossrhUsername')
            password = findProperty('ossrhPassword')
        }
    }
    connectTimeout = Duration.ofMinutes(3)
    clientTimeout = Duration.ofMinutes(3)
}

signing {
    def signingKey = findProperty("signing.secretKey")
    def signingPassword = findProperty("signing.password")
    def keyId = findProperty("signing.keyId")

    useInMemoryPgpKeys(keyId, signingKey, signingPassword)
    sign publishing.publications.mavenJava
}

// gradle.properties 파일에서 설정을 가져오도록 수정
if (project.hasProperty('signing.keyId') &&
        project.hasProperty('signing.password') &&
        project.hasProperty('signing.secretKey')) {

    signing {
        sign configurations.archives
    }
} else {
    println "Signing properties are not available. Skipping signing tasks."
}

spotless {
    java {
        importOrder()

//        cleanthat()          // has its own section below

        googleJavaFormat()   // has its own section below

//        formatAnnotations()  // fixes formatting of type annotations, see below
    }
}
